TechCorp API Documentation

=== Authentication ===

All API requests require authentication using API keys. Include your API key in the Authorization header:

```
Authorization: Bearer tc_live_1234567890abcdef
```

API Key Types:
- Development: tc_dev_* (limited to 1,000 requests/hour)
- Production: tc_live_* (rate limits based on plan)
- Admin: tc_admin_* (full access, use with caution)

Rate Limits:
- Free tier: 100 requests/hour
- Pro tier: 10,000 requests/hour
- Enterprise: Custom limits based on contract

=== Text Analysis API ===

Base URL: https://api.techcorp.com/v1/

**Sentiment Analysis**
POST /analyze/sentiment

Request:
```json
{
  "text": "I love this new feature!",
  "language": "en",
  "model": "tc-sentiment-v2"
}
```

Response:
```json
{
  "sentiment": "positive",
  "confidence": 0.92,
  "scores": {
    "positive": 0.92,
    "negative": 0.05,
    "neutral": 0.03
  },
  "processing_time_ms": 45
}
```

**Text Classification**
POST /analyze/classify

Request:
```json
{
  "text": "How do I reset my password?",
  "categories": ["support", "billing", "technical", "general"],
  "threshold": 0.7
}
```

Response:
```json
{
  "category": "support",
  "confidence": 0.89,
  "all_scores": {
    "support": 0.89,
    "technical": 0.34,
    "general": 0.12,
    "billing": 0.05
  }
}
```

**Named Entity Recognition**
POST /analyze/entities

Extracts people, organizations, locations, and custom entity types.

Request:
```json
{
  "text": "John Smith from TechCorp visited the San Francisco office.",
  "entity_types": ["PERSON", "ORG", "LOCATION", "CUSTOM"]
}
```

Response:
```json
{
  "entities": [
    {
      "text": "John Smith",
      "type": "PERSON",
      "start": 0,
      "end": 10,
      "confidence": 0.95
    },
    {
      "text": "TechCorp",
      "type": "ORG",
      "start": 16,
      "end": 24,
      "confidence": 0.98
    },
    {
      "text": "San Francisco",
      "type": "LOCATION",
      "start": 37,
      "end": 50,
      "confidence": 0.94
    }
  ]
}
```

=== Embedding API ===

**Generate Embeddings**
POST /embeddings/generate

Convert text to high-dimensional vectors for similarity search.

Request:
```json
{
  "texts": [
    "Machine learning is transforming industries",
    "AI models require large amounts of data"
  ],
  "model": "tc-embed-v3",
  "normalize": true
}
```

Response:
```json
{
  "embeddings": [
    [0.1, 0.5, -0.2, ...],
    [0.3, 0.1, -0.4, ...]
  ],
  "dimensions": 768,
  "model": "tc-embed-v3"
}
```

**Similarity Search**
POST /embeddings/search

Find similar documents in your vector database.

Request:
```json
{
  "query": "How does machine learning work?",
  "index_id": "my_knowledge_base",
  "top_k": 5,
  "filters": {
    "category": "technical",
    "date_range": "2024-01-01:2024-12-31"
  }
}
```

Response:
```json
{
  "results": [
    {
      "id": "doc_123",
      "text": "Machine learning algorithms learn patterns...",
      "score": 0.92,
      "metadata": {
        "category": "technical",
        "author": "Dr. Smith",
        "date": "2024-03-15"
      }
    }
  ],
  "query_embedding": [0.2, 0.7, -0.1, ...],
  "search_time_ms": 23
}
```

=== Troubleshooting ===

**Common Error Codes**

400 Bad Request:
- Invalid JSON format
- Missing required parameters
- Text exceeds maximum length (10,000 characters)

401 Unauthorized:
- Missing or invalid API key
- API key expired or revoked
- Insufficient permissions for endpoint

429 Too Many Requests:
- Rate limit exceeded
- Upgrade plan or wait for reset
- Implement exponential backoff

500 Internal Server Error:
- Temporary service disruption
- Model loading issues
- Contact support if persistent

**Best Practices**

Performance Optimization:
- Batch multiple texts in single requests when possible
- Cache embeddings to avoid redundant API calls
- Use appropriate model for your use case (speed vs. accuracy)

Error Handling:
```python
import requests
import time

def call_api_with_retry(url, data, max_retries=3):
    for attempt in range(max_retries):
        try:
            response = requests.post(url, json=data, timeout=30)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            if attempt == max_retries - 1:
                raise e
            wait_time = 2 ** attempt  # Exponential backoff
            time.sleep(wait_time)
```

**API Limits and Quotas**

Request Size Limits:
- Single text: 10,000 characters
- Batch requests: 100 texts per request
- File uploads: 50MB maximum

Response Timeouts:
- Sentiment/Classification: 5 seconds
- Embeddings: 10 seconds
- Batch processing: 60 seconds

Concurrent Requests:
- Free tier: 5 concurrent requests
- Pro tier: 50 concurrent requests
- Enterprise: Custom limits

**SDK and Libraries**

Official SDKs:
- Python: pip install techcorp-api
- JavaScript: npm install @techcorp/api-client
- Go: go get github.com/techcorp/go-sdk
- Java: Available via Maven Central

Community Libraries:
- R package: techcorpR
- Ruby gem: techcorp-ruby
- PHP package: techcorp/php-sdk

Example Python Usage:
```python
from techcorp import TechCorpClient

client = TechCorpClient(api_key="tc_live_your_key_here")

result = client.analyze_sentiment("I love this product!")
print(f"Sentiment: {result.sentiment} (confidence: {result.confidence})")

embeddings = client.generate_embeddings(["text1", "text2"])
print(f"Generated {len(embeddings)} embeddings")
```
