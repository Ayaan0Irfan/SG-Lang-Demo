[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sglang-rag-demo"
version = "0.1.0"
description = "RAG system with SGLang structured prompts"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Demo Author", email = "demo@example.com"}
]
maintainers = [
    {name = "Demo Author", email = "demo@example.com"}
]
keywords = ["rag", "llm", "sglang", "vector-search", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "python-dotenv>=1.0.0",
    "groq>=0.4.0",
    "together>=0.2.0",
    "faiss-cpu>=1.7.4",
    "sentence-transformers>=2.2.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "streamlit>=1.28.0",
    "matplotlib>=3.7.0",
    "plotly>=5.15.0",
    "requests>=2.31.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
web = [
    "streamlit>=1.28.0",
    "plotly>=5.15.0",
    "seaborn>=0.12.0",
]

[project.urls]
Homepage = "https://github.com/sglang-rag/demo"
Documentation = "https://sglang-rag-demo.readthedocs.io"
Repository = "https://github.com/sglang-rag/demo.git"
Issues = "https://github.com/sglang-rag/demo/issues"

[project.scripts]
sglang-rag = "sglang_demo.cli:main"
sglang-web = "web.app:run_app"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-fail-under=25",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "smoke: marks tests as smoke tests",
    "requires_api: marks tests that require API keys",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "sentence_transformers.*",
    "groq.*",
    "together.*",
    "streamlit.*",
    "plotly.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "B", "A", "C4", "PIE", "T20", "Q"]
ignore = [
    "E402",  # Module level import not at top of file (needed for path manipulation)
    "E501",  # Line too long (handled by black)
    "W291",  # Trailing whitespace (handled by black)
    "C401",  # Unnecessary generator (acceptable for readability)
    "B904",  # Exception handling (intentional in some cases)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "T201"]  # Allow assert statements and print statements in tests
"scripts/*" = ["T201"]  # Allow print statements in scripts
"src/sglang_demo/*" = ["T201"]  # Allow print statements in CLI interface
"src/rag_system/*" = ["T201"]  # Allow print statements in RAG system for logging
"src/sglang/*" = ["T201"]  # Allow print statements in sglang modules

[tool.setuptools]
py-modules = ["config"]
